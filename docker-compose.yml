services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - ./api/.env
    ports:
      - "8000:8000"
    depends_on:
      - elasticsearch
      - rabbitmq
      - query-converter
      - logger
    volumes:
      - ./api:/app 
    restart: ${DOCKER_RESTART_POLICY}

  query-converter:
    build:
      context: ./query_converter
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    env_file:
      - ./query_converter/.env
    ports:
      - "8001:8001"
    volumes:
      - ./query_converter/src/app:/code/app
      - ./query_converter/.env:/code/.env 
    restart: ${DOCKER_RESTART_POLICY}

  logger:
    build:
      context: ./logger_service
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
    env_file:
      - ./logger_service/.env
    ports:
      - "8002:8002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./logger_service/src/app:/code/app
      - ./logger_service/.env:/code/.env
    restart: ${DOCKER_RESTART_POLICY}

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # RabbitMQ port
      - "15672:15672" # RabbitMQ management UI port
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5 
    restart: ${DOCKER_RESTART_POLICY}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: ${DOCKER_RESTART_POLICY}

volumes:
  esdata:
  rabbitmq-data:
